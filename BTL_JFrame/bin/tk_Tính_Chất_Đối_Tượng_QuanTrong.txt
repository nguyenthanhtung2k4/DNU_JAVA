==> 4 Tính chất cốt lõi trong Đối Tượng : 

Đóng gói (Encapsulation)
     Định nghĩa: Đóng gói là việc gói gọn dữ liệu (thuộc tính) và các phương thức (hành động) của một đối tượng vào trong một đơn vị duy nhất, là lớp.
     Mục đích:
          Bảo vệ dữ liệu bên trong khỏi bị truy cập và sửa đổi trực tiếp từ bên ngoài, tăng tính bảo mật.
          Tập trung vào các giao diện của đối tượng, làm giảm độ phức tạp của chương trình.
     Thực hiện:
          Sử dụng các từ khóa public: cong khai, private: rieng tu , protected để kiểm soát mức độ truy cập vào các thành phần của lớp.
2. Kế thừa (Inheritance)
     Định nghĩa: Kế thừa là khả năng tạo ra một lớp mới (lớp con) dựa trên một lớp đã có (lớp cha). Lớp con kế thừa tất cả các thuộc tính và phương thức của lớp cha và có thể thêm hoặc thay đổi chúng.
     Mục đích:
          Tái sử dụng code, tránh viết lại các đoạn code giống nhau.
          Tạo ra mối quan hệ "là một" giữa các lớp, ví dụ: "Chim là một loài động vật".
     Thực hiện:
          Sử dụng từ khóa extends để chỉ ra rằng một lớp kế thừa từ lớp khác. supper : để truy vấn đến thằng cha....
3. Đa hình (Polymorphism)
     Định nghĩa: Đa hình là khả năng của một đối tượng có thể có nhiều hình dạng khác nhau. Nói cách khác, các đối tượng thuộc các lớp khác nhau có thể đáp ứng cùng một yêu cầu nhưng thực hiện theo những cách khác nhau.
     Mục đích:
          Tăng tính linh hoạt của chương trình.
          Giúp code dễ dàng mở rộng và bảo trì.
     Thực hiện:
          Nạp chồng phương thức (Method Overloading): Cùng một tên phương thức nhưng với các tham số khác nhau.
          Ghi đè phương thức (Method Overriding): Lớp con định nghĩa lại một phương thức đã có trong lớp cha.
4. Trừu tượng (Abstraction)
     -Định nghĩa: Trừu tượng là việc tập trung vào các đặc tính và hành động quan trọng của một đối tượng mà bỏ qua các chi tiết thực hiện bên trong.
     -Mục đích:
          Đơn giản hóa các vấn đề phức tạp bằng cách chỉ xem xét các khái niệm chung.
          Tạo ra các lớp trừu tượng (abstract class) và giao diện (interface) để định nghĩa các khuôn mẫu chung.
     -Thực hiện:
          Sử dụng từ khóa abstract để khai báo các lớp trừu tượng và các phương thức trừu tượng.
          Sử dụng giao diện để định nghĩa các hợp đồng mà các lớp phải tuân thủ.

*ƯU điểm:
     Dễ sử dụng , tái sử dụng code
     Dẻ mở dộng dự án
     Tiết kiệm tài nguyên....
     Che giấu tốt
*Nhược điểm:
     Đòi hỏi tư duy cao 
     phức thức phức tạp
     nắm  chắc tính chất cơ bản của java.

==> Tuy nhiên không phải cái gì  cũng dùng opp  để lập trinhd mà còn sử dụng lập trình cấu trúc sẽ tốt  hơn. Việc đó ta cần lắm dõ mục đích sử dụng .
///////////////////////////////////////// Sử khác nhau của OPP và POP /////////////////////////////////
Lập Trình Hướng Thủ Tục (POP):

     Trọng tâm: Tập trung vào việc thực hiện các hành động (thủ tục, hàm) theo một trình tự nhất định để giải quyết vấn đề.
     Cấu trúc: Chương trình được chia thành các hàm (function) hoặc thủ tục (procedure), mỗi hàm thực hiện một nhiệm vụ cụ thể.
     Dữ liệu: Dữ liệu và các hàm hoạt động trên dữ liệu thường được tách biệt.
     Ưu điểm:
               Dễ học và triển khai cho các chương trình nhỏ.
               Hiệu suất có thể cao hơn OOP trong một số trường hợp đơn giản.
     Nhược điểm:
               Khó quản lý và bảo trì khi chương trình lớn lên.
               Khó tái sử dụng code.
               Ít linh hoạt trong việc mô hình hóa các vấn đề thực tế.


Lập Trình Hướng Đối Tượng (OOP):

     Trọng tâm: Tập trung vào việc mô hình hóa thế giới thực thành các đối tượng, mỗi đối tượng có các thuộc tính (data) và hành vi (methods).
     Cấu trúc: Chương trình được tổ chức thành các lớp (class), mỗi lớp đại diện cho một loại đối tượng. Các đối tượng là các instance của lớp.
     Dữ liệu và hành vi: Dữ liệu và các hành động liên quan đến dữ liệu được đóng gói trong cùng một đối tượng.
     Ưu điểm:
               Dễ hiểu và bảo trì hơn POP, đặc biệt với các chương trình lớn và phức tạp.
               Tái sử dụng code tốt hơn nhờ cơ chế kế thừa và đa hình.
               Mô hình hóa vấn đề thực tế một cách tự nhiên.
               Hỗ trợ quản lý dự án lớn và phức tạp.
     Nhược điểm:
               Độ phức tạp cao hơn POP, đòi hỏi hiểu biết sâu hơn về các khái niệm OOP.
               Có thể kém hiệu quả hơn POP trong một số trường hợp đơn giản.


//////////////////////////////////////////////////////////////////////////


===>> Các ngôn ngữ thường được sử dụng trong OPP (Lập trình đối tượng)
java, pytho,c++...